/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

import java.io.*;
import java.sql.*;
import java.util.*;
import javax.swing.JFileChooser;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 *
 * @author vinodkumar
 */
public class Home extends javax.swing.JFrame {

    /**
     * Creates new form Home
     */
    public Home() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jProgressBar1 = new javax.swing.JProgressBar();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jButton1.setText("jButton1");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel1.setText("jLabel1");

        jProgressBar1.setStringPainted(true);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jProgressBar1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 124, Short.MAX_VALUE)
                .addComponent(jButton1)
                .addGap(27, 27, 27))
            .addGroup(layout.createSequentialGroup()
                .addGap(38, 38, 38)
                .addComponent(jLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(64, 64, 64)
                .addComponent(jLabel1)
                .addGap(19, 19, 19)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jButton1)
                    .addComponent(jProgressBar1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(172, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        
        String[] files = {"test", "test1", "test2"};
        
        for (String file : files) {
            
            
            jLabel1.setText("Processing file: "+ file);
            this.process_file("/Users/vinodkumar/Desktop/ana/"+file+".csv");
        }
        
        
    }//GEN-LAST:event_jButton1ActionPerformed

    public void process_file(String filename){
        
        final long startTime = System.currentTimeMillis();
       
        Connection c = null;
        Statement stmt1 = null;
        Statement stmt2 = null;
        try {
          Class.forName("org.sqlite.JDBC");
          c = DriverManager.getConnection("jdbc:sqlite:test.db");
          System.out.println("Opened database successfully");
          
          // Drop table
          stmt1 = c.createStatement();
          String sql1 = "DROP TABLE IF EXISTS BATCHPROCESS ";
          stmt1.executeUpdate(sql1);
          stmt1.close();
          
          //
          stmt2 = c.createStatement();
          String sql2 = "CREATE TABLE BATCHPROCESS " +
                        "(COL1   varchar(150), " + 
                        " COL2   varchar(150), " + 
                        " COL3   varchar(150), " + 
                        " COL4   varchar(150), " + 
                        " COL5   varchar(150), " + 
                        " COL6   varchar(150), " + 
                        " COL7   varchar(150), " + 
                        " COL8   varchar(150), " + 
                        " COL9   varchar(150), " + 
                        " COL10   varchar(150), " + 
                        " COL11   varchar(150), " + 
                        " COL12   varchar(150), " + 
                        " COL13   varchar(150), " + 
                        " COL14   varchar(150), " + 
                        " COL15   varchar(150), " + 
                        " COL16   varchar(150), " + 
                        " COL17   varchar(150))"; 
          stmt2.executeUpdate(sql2);
          stmt2.close();
          //c.close();
        } catch ( Exception e ) {
          System.err.println( e.getClass().getName() + ": " + e.getMessage() );
          System.exit(0);
        }
        
        System.out.println("Table created successfully");
       
   
        
        //Read CSV file and insert to table
        BufferedReader br = null;
        String line = "";
   

        try {
            
            
            br = new BufferedReader(new FileReader(filename));
            
            int batch_size = 1000; //change to see time
            int counter = 1;
            
            while ((line = br.readLine()) != null) {

                String[] data = line.split(",");

                //System.out.println(data[16]);

                
                
              
                try {
                    c.setAutoCommit(false);
                    String query = "INSERT INTO BATCHPROCESS values(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
                    PreparedStatement ps = c.prepareStatement(query);
                    ps.setString(1,data[0]);
                    ps.setString(2,data[1]);
                    ps.setString(3,data[2]);
                    ps.setString(4,data[3]);
                    ps.setString(5,data[4]);
                    ps.setString(6,data[5]);
                    ps.setString(7,data[6]);
                    ps.setString(8,data[7]);
                    ps.setString(9,data[8]);
                    ps.setString(10,data[9]);
                    ps.setString(11,data[10]);
                    ps.setString(12,data[11]);
                    ps.setString(13,data[12]);
                    ps.setString(14,data[13]);
                    ps.setString(15,data[14]);
                    ps.setString(16,data[15]);
                    ps.setString(17,data[16]);
                    ps.executeUpdate();
                    //ps.addBatch();
                    System.out.println(counter);
                    
                    
                   
                            
                    if (counter > batch_size){
                        //ps.executeBatch();
                        //counter = 1;
                    }
                    
                           
                } catch (SQLException ex) {
                    System.out.println(ex.getMessage());
                    //Logger.getLogger(Home.class.getName()).log(Level.SEVERE, null, ex);
                }
                
                 //System.out.println(counter);
                
                counter++;
            

                

            }

        } catch (FileNotFoundException e) {
            System.out.println(e.getMessage());
        } catch (IOException e) {
            System.out.println(e.getMessage());
        }

        
        
        File output_file = new File("/Users/vinodkumar/Desktop/ana/output");
        if (!output_file.exists()) {
            output_file.mkdir();
        }
        
        File f = new File(filename);
        String of = f.getName();
      
        
        try {
            
          FileWriter fw = new FileWriter(output_file+"/"+of);  
          
          // Drop table
          stmt1 = c.createStatement();
          String sql1 = "SELECT * FROM BATCHPROCESS ORDER BY COL7,COL6";
          ResultSet rs = stmt1.executeQuery(sql1);
       
          while(rs.next()){
         //Retrieve by column name
         
        
         
         
         fw.append(rs.getString("COL1"));
         fw.append(',');
         fw.append(rs.getString("COL2"));
         fw.append(',');
         fw.append(rs.getString("COL3"));
         fw.append('\n');
         
         
         
         
           
      }
          
        fw.flush();
            fw.close();
          
          
          stmt1.close();
        } catch ( Exception e ) {
          System.err.println( e.getClass().getName() + ": " + e.getMessage() );
          System.exit(0);
        } finally{
            
            try { c.close(); } catch (Exception e) { /* ignored */ }
            
        }
        
        final long endTime = System.currentTimeMillis();
        System.out.println("Total execution time: " + (endTime - startTime) + "ms");
        
        
        
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Home.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Home.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Home.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Home.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Home().setVisible(true);
            }
        });
    }
    
    
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JProgressBar jProgressBar1;
    // End of variables declaration//GEN-END:variables
}
